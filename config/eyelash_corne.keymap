#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };*/

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <40>;       // 300
    delay-ms = <16>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    macros {
        flash_macro: flash_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <21 22 23>;
            hold-trigger-on-release;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <0>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <30>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <17 16 15 14>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 8>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <24 23>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <37 38>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 7>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 22>;
        };

        flash {
            bindings = <&bootloader>;
            key-positions = <12 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwery {
            label = "Qwery";
            bindings = <
&as TILDE GRAVE  &kp Q                &kp W            &kp E             &kp R              &kp T                                  &kp UP_ARROW                     &kp Y         &kp U               &kp I                 &kp O                    &kp P                &as PLUS EQUAL
&kp CAPSLOCK     &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D   &hml LEFT_SHIFT F  &kp G                  &kp LEFT_ARROW  &to 4           &kp RIGHT_ARROW  &kp H         &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L         &as COLON SEMICOLON  &as DOUBLE_QUOTES SINGLE_QUOTE
&kp ENTER        &kp Z                &kp X            &kp C             &kp V              &kp B         &to 6                    &kp DOWN_ARROW                   &kp N         &kp M               &as LESS_THAN COMMA   &as GREATER_THAN PERIOD  &as QUESTION SLASH   &kp ENTER
                                                       &ltq 1 BACKSPACE  &ltq 3 TAB         &ltq 2 SPACE                                                            &ltq 2 SPACE  &ltq 3 ENTER        &ltq 4 DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Navi {
            label = "Navi";
            bindings = <
&trans  &trans        &trans        &kp HOME          &kp PAGE_UP     &kp C_VOLUME_UP                      &trans          &kp C_BRIGHTNESS_INC  &trans          &kp UP_ARROW    &trans           &trans  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp C_VOLUME_DOWN            &trans  &trans  &trans  &kp C_BRI_DN          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans        &trans        &kp END           &kp PAGE_DOWN   &kp K_MUTE         &trans            &trans          &kp C_BRI_AUTO        &trans          &trans          &trans           &trans  &trans
                                    &trans            &trans          &trans                                               &trans                &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        Symbol {
            label = "Symbol";
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH  &kp DOLLAR  &kp PERCENT                       &trans          &kp LCTRL  &kp AMPERSAND    &kp ASTERISK                    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp ESCAPE       &kp CAPSLOCK  &kp HOME  &kp END     &kp UNDERSCORE            &trans  &trans  &trans  &kp MINUS  &kp RIGHT_SHIFT  &kp PAGE_UP                     &kp PAGE_DOWN         &kp INSERT             &trans
&trans  &kp BACKSPACE    &trans        &trans    &trans      &kp TILDE       &trans            &trans          &kp GRAVE  &as PLUS EQUAL   &as DOUBLE_QUOTES SINGLE_QUOTE  &as PIPE BACKSLASH    &kp DELETE             &trans
                                       &trans    &trans      &trans                                            &trans     &trans           &trans
            >;
        };

        Modifier {
            label = "Modifier";
            bindings = <
&kp LC(Q)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                        &trans          &kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8       &kp NUMBER_9   &kp NUMBER_0   &trans
&trans     &kp LC(A)     &kp LC(S)     &kp LC(D)     &kp LC(F)     &kp LEFT_BRACKET            &trans  &trans  &trans  &kp RIGHT_BRACKET  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI  &trans
&trans     &kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LEFT_BRACE    &trans            &trans          &kp RIGHT_BRACE    &kp F1           &kp F2             &kp F3         &kp F4         &trans
                                       &trans        &trans        &trans                                              &trans             &trans           &trans
            >;
        };

        Mouse {
            label = "Mouse";
            bindings = <
&to 0   &trans  &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &trans                       &trans          &trans     &trans     &trans  &trans  &trans  &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans               &trans  &to 0   &trans  &trans     &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans     &trans            &trans          &trans     &trans     &trans  &trans  &trans  &trans
                                &trans          &mkp LCLK        &mkp RCLK                                    &mkp LCLK  &mkp RCLK  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Flash {
            bindings = <
&flash_macro  &trans  &trans  &trans  &trans  &trans                    &trans          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans        &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans        &trans
&trans        &trans  &trans  &trans  &trans  &trans  &trans            &trans          &bt BT_CLR    &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
                              &trans  &trans  &trans                                    &trans        &trans        &trans
            >;

            label = "Flash";
        };

        RGB {
            bindings = <
&ext_power EP_TOG  &trans  &trans  &trans  &trans  &rgb_ug RGB_SPI                            &rgb_ug RGB_HUI                   &rgb_ug RGB_SPD  &trans  &trans  &trans  &trans  &trans
&trans             &trans  &trans  &trans  &trans  &rgb_ug RGB_EFR           &rgb_ug RGB_SAI  &rgb_ug RGB_TOG  &rgb_ug RGB_SAD  &rgb_ug RGB_EFF  &trans  &trans  &trans  &trans  &trans
&trans             &trans  &trans  &trans  &trans  &rgb_ug RGB_BRI  &to 0                     &rgb_ug RGB_HUD                   &rgb_ug RGB_BRD  &trans  &trans  &trans  &trans  &trans
                                   &trans  &trans  &trans                                                                       &trans           &trans  &trans
            >;

            label = "RGB";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Flash {
            if-layers = <2 3>;
            then-layer = <5>;
        };
    };
};
